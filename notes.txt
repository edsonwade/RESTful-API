put methods
// Look u existing lesson
   // if  lesson  do not exist, return 404 error not found
   const lesson = lessons.find((l) => l.id === parseInt(req.params.id));
   if (!lesson) {
     res.status(404).send("The lesson ID given was not found");
   }
   res.send(lesson);
   // validate the input
   // if inputs is invalid ,then return a 400 error -bad request
   if (!req.body.lesson || req.body.lesson.length < 3) {
    return res
      .status(400)
      .send("Lesson required and should be at least 3 characters long");
  }
    //update the specified lessons
    //return the update lesson to the client, in the browser
      lesson.lesson = req.body.lesson;
     res.send(lesson)


let d = new Date(Date.UTC(2022, 04, 30));

app.get("/", (req, res) => {
  res.send({
    name: "vanilson",
    project: "Restfull api with node + express",
    date: d,
  });
});

app.get("/api/v1/arrays", (req, res) => {
  res.send(arr);
});

/* get the lesson by specific id  . req.params return a string reason why the parse */
app.get("/api/v1/lesson/:id", (req, res) => {
  const lesson = lessons.find((l) => l.id === parseInt(req.params.id));
  if (!lesson) {
    res.status(404).send("The lesson ID given was not found");
  }
  res.send(lesson);
});

/* Multiple params -> passing the year and name of the movie
app.get("/api/v1/lesson/:year/:title", (req, res) => {
  res.send(req.params);
});*/

/** query string params with question mark ? */
app.get("/api/v1/lesson/:year/:title", (req, res) => {
  res.send(req.query);
});

/* passing parameters */
app.get("/api/v1/lesson/:id", (req, res) => {
  res.send(req.params.id);
});